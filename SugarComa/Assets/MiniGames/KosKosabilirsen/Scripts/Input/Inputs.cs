//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/MiniGames/KosKosabilirsen/Scripts/Input/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Assets.MiniGames.KosKosabilirsen.Scripts.Input
{
    public partial class @Inputs : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Inputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""5d2fb00e-f86b-42a0-8385-f50f1fe545ab"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""f1818578-b92a-4d39-8a11-d57b6a812c66"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""a8b23f71-0be4-4e01-b1fb-592aeb8e9416"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""cddb56a6-a7d1-40cc-89fb-c35dbf655a4a"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9fab2030-5109-4731-ac3b-9b162d18ccbb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControl"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ac44e79b-f4da-42c1-a401-0d39e5c57154"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControl"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""060637a7-151a-4023-ade3-a6563af1fa37"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControl"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f599142b-3d11-45cb-b30f-5120f3de8df8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControl"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""11e1f24c-507b-47c1-8cba-e10dfb305f60"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControl"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""148794c5-b1dc-4e24-8437-e468e7d9a333"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControl"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Hook"",
            ""id"": ""d2367e1f-8001-4611-9833-57c406ed3f57"",
            ""actions"": [
                {
                    ""name"": ""ActivateHook"",
                    ""type"": ""Button"",
                    ""id"": ""ea5dbb45-e9db-4ce7-83ac-b1465214c4ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""01c94056-1098-4055-9613-23357437cc95"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControl"",
                    ""action"": ""ActivateHook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Rotation"",
            ""id"": ""3a88767f-e464-4743-b0d7-8a74a1c0c726"",
            ""actions"": [
                {
                    ""name"": ""RotateWithGamepad"",
                    ""type"": ""Value"",
                    ""id"": ""404afba1-de59-439f-86b9-26362057fc76"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateWithMouse"",
                    ""type"": ""Value"",
                    ""id"": ""26217ed5-fcca-499b-9bfc-5717d444a324"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ActivateMouseRotation"",
                    ""type"": ""Button"",
                    ""id"": ""48349746-03b1-4b97-b609-8d1fb437e7be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""97a982f5-f274-46c9-81a4-eb84ded3d3d8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateWithGamepad"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9be10a8c-a288-402d-92ff-c7f479b86af4"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControl"",
                    ""action"": ""RotateWithGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c610ab0d-79c1-4d13-944f-a9e8031721e1"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControl"",
                    ""action"": ""ActivateMouseRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ff70839-aa14-4a8e-8931-d4876b9bd7ae"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControl"",
                    ""action"": ""RotateWithMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""81becb35-6e32-49c3-9d2d-7c30ea59ac92"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControl"",
                    ""action"": ""RotateWithMouse"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PlayerControl"",
            ""bindingGroup"": ""PlayerControl"",
            ""devices"": []
        }
    ]
}");
            // Movement
            m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
            m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
            m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
            // Hook
            m_Hook = asset.FindActionMap("Hook", throwIfNotFound: true);
            m_Hook_ActivateHook = m_Hook.FindAction("ActivateHook", throwIfNotFound: true);
            // Rotation
            m_Rotation = asset.FindActionMap("Rotation", throwIfNotFound: true);
            m_Rotation_RotateWithGamepad = m_Rotation.FindAction("RotateWithGamepad", throwIfNotFound: true);
            m_Rotation_RotateWithMouse = m_Rotation.FindAction("RotateWithMouse", throwIfNotFound: true);
            m_Rotation_ActivateMouseRotation = m_Rotation.FindAction("ActivateMouseRotation", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Movement
        private readonly InputActionMap m_Movement;
        private IMovementActions m_MovementActionsCallbackInterface;
        private readonly InputAction m_Movement_Move;
        private readonly InputAction m_Movement_Jump;
        public struct MovementActions
        {
            private @Inputs m_Wrapper;
            public MovementActions(@Inputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Movement_Move;
            public InputAction @Jump => m_Wrapper.m_Movement_Jump;
            public InputActionMap Get() { return m_Wrapper.m_Movement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
            public void SetCallbacks(IMovementActions instance)
            {
                if (m_Wrapper.m_MovementActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                    @Jump.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                }
                m_Wrapper.m_MovementActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                }
            }
        }
        public MovementActions @Movement => new MovementActions(this);

        // Hook
        private readonly InputActionMap m_Hook;
        private IHookActions m_HookActionsCallbackInterface;
        private readonly InputAction m_Hook_ActivateHook;
        public struct HookActions
        {
            private @Inputs m_Wrapper;
            public HookActions(@Inputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @ActivateHook => m_Wrapper.m_Hook_ActivateHook;
            public InputActionMap Get() { return m_Wrapper.m_Hook; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(HookActions set) { return set.Get(); }
            public void SetCallbacks(IHookActions instance)
            {
                if (m_Wrapper.m_HookActionsCallbackInterface != null)
                {
                    @ActivateHook.started -= m_Wrapper.m_HookActionsCallbackInterface.OnActivateHook;
                    @ActivateHook.performed -= m_Wrapper.m_HookActionsCallbackInterface.OnActivateHook;
                    @ActivateHook.canceled -= m_Wrapper.m_HookActionsCallbackInterface.OnActivateHook;
                }
                m_Wrapper.m_HookActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ActivateHook.started += instance.OnActivateHook;
                    @ActivateHook.performed += instance.OnActivateHook;
                    @ActivateHook.canceled += instance.OnActivateHook;
                }
            }
        }
        public HookActions @Hook => new HookActions(this);

        // Rotation
        private readonly InputActionMap m_Rotation;
        private IRotationActions m_RotationActionsCallbackInterface;
        private readonly InputAction m_Rotation_RotateWithGamepad;
        private readonly InputAction m_Rotation_RotateWithMouse;
        private readonly InputAction m_Rotation_ActivateMouseRotation;
        public struct RotationActions
        {
            private @Inputs m_Wrapper;
            public RotationActions(@Inputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @RotateWithGamepad => m_Wrapper.m_Rotation_RotateWithGamepad;
            public InputAction @RotateWithMouse => m_Wrapper.m_Rotation_RotateWithMouse;
            public InputAction @ActivateMouseRotation => m_Wrapper.m_Rotation_ActivateMouseRotation;
            public InputActionMap Get() { return m_Wrapper.m_Rotation; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(RotationActions set) { return set.Get(); }
            public void SetCallbacks(IRotationActions instance)
            {
                if (m_Wrapper.m_RotationActionsCallbackInterface != null)
                {
                    @RotateWithGamepad.started -= m_Wrapper.m_RotationActionsCallbackInterface.OnRotateWithGamepad;
                    @RotateWithGamepad.performed -= m_Wrapper.m_RotationActionsCallbackInterface.OnRotateWithGamepad;
                    @RotateWithGamepad.canceled -= m_Wrapper.m_RotationActionsCallbackInterface.OnRotateWithGamepad;
                    @RotateWithMouse.started -= m_Wrapper.m_RotationActionsCallbackInterface.OnRotateWithMouse;
                    @RotateWithMouse.performed -= m_Wrapper.m_RotationActionsCallbackInterface.OnRotateWithMouse;
                    @RotateWithMouse.canceled -= m_Wrapper.m_RotationActionsCallbackInterface.OnRotateWithMouse;
                    @ActivateMouseRotation.started -= m_Wrapper.m_RotationActionsCallbackInterface.OnActivateMouseRotation;
                    @ActivateMouseRotation.performed -= m_Wrapper.m_RotationActionsCallbackInterface.OnActivateMouseRotation;
                    @ActivateMouseRotation.canceled -= m_Wrapper.m_RotationActionsCallbackInterface.OnActivateMouseRotation;
                }
                m_Wrapper.m_RotationActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @RotateWithGamepad.started += instance.OnRotateWithGamepad;
                    @RotateWithGamepad.performed += instance.OnRotateWithGamepad;
                    @RotateWithGamepad.canceled += instance.OnRotateWithGamepad;
                    @RotateWithMouse.started += instance.OnRotateWithMouse;
                    @RotateWithMouse.performed += instance.OnRotateWithMouse;
                    @RotateWithMouse.canceled += instance.OnRotateWithMouse;
                    @ActivateMouseRotation.started += instance.OnActivateMouseRotation;
                    @ActivateMouseRotation.performed += instance.OnActivateMouseRotation;
                    @ActivateMouseRotation.canceled += instance.OnActivateMouseRotation;
                }
            }
        }
        public RotationActions @Rotation => new RotationActions(this);
        private int m_PlayerControlSchemeIndex = -1;
        public InputControlScheme PlayerControlScheme
        {
            get
            {
                if (m_PlayerControlSchemeIndex == -1) m_PlayerControlSchemeIndex = asset.FindControlSchemeIndex("PlayerControl");
                return asset.controlSchemes[m_PlayerControlSchemeIndex];
            }
        }
        public interface IMovementActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
        }
        public interface IHookActions
        {
            void OnActivateHook(InputAction.CallbackContext context);
        }
        public interface IRotationActions
        {
            void OnRotateWithGamepad(InputAction.CallbackContext context);
            void OnRotateWithMouse(InputAction.CallbackContext context);
            void OnActivateMouseRotation(InputAction.CallbackContext context);
        }
    }
}
